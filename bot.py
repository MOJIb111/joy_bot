import asyncio
from math import lgamma

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import psycopg2
from aiogram.filters import Command
from settings import BOT_TOKEN
from cache import cache

DB_CONFIG = {
    'dbname': 'joyreactor_data',
    'user': 'saitama',
    'password': 'hungry',
    'host': 'postgres',
    'port': '5432'
}

bot = Bot(token=BOT_TOKEN)

dp = Dispatcher()

def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üëç –•–æ—Ä–æ—à–∏–µ"),
            KeyboardButton(text="üî• –¢–æ–ø")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )
    return keyboard

def get_good_pictures():
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()

        cursor.execute(
            """
            SELECT img_url, rating
            FROM pictures
            ORDER BY rating DESC        
            """)

        results = cursor.fetchall()
        cursor.close()
        conn.close()

        pictures = []
        for result in results:
            pictures.append(
                {"img_url" : result[0],
                 "rating" : result[1]}
            )
        return pictures
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

def get_best_pictures():
    try:
        cached_data = cache.get("best_pictures")
        if cached_data:
            return cached_data

        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()

        cursor.execute(
            """
            SELECT img_url, rating
            FROM pictures
            WHERE rating > 100
            """)
        results =  cursor.fetchall()
        cursor.close()
        conn.close()

        pictures = []
        for result in results:
            pictures.append({
                "img_url" : result[0],
                "rating" : result[1]
            })
        cache.set("best_pictures", pictures)
        return pictures
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {e}")
        return []
@dp.message(Command("start"))
async def handle_start(message: types.Message):
    welcome_text = """
    üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
    ‚Ä¢ üëç –•–æ—Ä–æ—à–∏–µ - –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    ‚Ä¢ üî• –¢–æ–ø - —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ (—Ä–µ–π—Ç–∏–Ω–≥ > 100)
    """
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

@dp.message(Command("menu"))
async def handle_menu(message: types.Message):
    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

@dp.message(lambda message: message.text == "üëç –•–æ—Ä–æ—à–∏–µ")
async def handle_good(message: types.Message):
    pictures = get_good_pictures()

    if not pictures:
        await message.answer("–í –±–∞–∑–µ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏")
        return

    for i in range(min(5, len(pictures))):
        await message.answer_photo(photo=pictures[i]["img_url"],reply_markup=get_main_keyboard())
    await asyncio.sleep(0.3)

@dp.message(lambda message: message.text == "üî• –¢–æ–ø")
async def handle_best(message: types.Message):
    pictures = get_best_pictures()

    if not pictures:
        await message.answer("üòî –ù–µ—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º > 100")
        return

    for i in range(1, len(pictures)):
        await message.answer_photo(photo=pictures[i]["img_url"], reply_markup=get_main_keyboard())
    await asyncio.sleep(0.1)

@dp.message(lambda message: message.text == "–û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à")
async def refresh_cash(message: types.Message):
    cache.delete("best_pictures")
    await message.answer("–ö—ç—à –æ–±–Ω–æ–≤–ª—ë–Ω", reply_markup=get_main_keyboard())

@dp.message(Command("help"))
async def handle_help(message: types.Message):
    help_text = """
    ü§ñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:
    /start - –Ω–∞—á–∞—Ç—å
    /menu - –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    /help - –ø–æ–º–æ—â—å
    
    –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏:
    ‚Ä¢ üëç –•–æ—Ä–æ—à–∏–µ - –≤—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    ‚Ä¢ üî• –¢–æ–ø - —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ (—Ä–µ–π—Ç–∏–Ω–≥ > 100)
    """
    await message.answer(help_text, reply_markup=get_main_keyboard())

@dp.message()
async def handle_other_messages(message: types.Message):
    if message.text not in ["üëç –•–æ—Ä–æ—à–∏–µ", "üî• –¢–æ–ø"]:
        await message.answer(
            "ü§î –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –Ω–∞—á–∞—Ç—å\n"
            "/menu - –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏\n"
            "/help - –ø–æ–º–æ—â—å",
            reply_markup=get_main_keyboard()
        )

async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())