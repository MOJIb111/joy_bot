import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from postgres_db.postgresdb import repository
from config import config
from aiogram.filters import Command
from cache import cache
from collections import defaultdict

bot = Bot(config.BOT_TOKEN)
dp = Dispatcher()

user_positions = defaultdict(lambda: defaultdict(int))

def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üëç –•–æ—Ä–æ—à–∏–µ"),
             KeyboardButton(text="üî• –¢–æ–ø")],
            [KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à"),
             KeyboardButton(text="–°–±—Ä–æ—Å")]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_good_pictures():
    try:
        return repository.get_good_pictures()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–æ—Ä–æ—à–∏—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫: {e}")
        return []

def get_best_pictures():
    try:
        cached_data = cache.get("best_pictures")
        if cached_data:
            print("üì¶ –î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –ª—É—á—à–∏–µ")
            return cached_data

        pictures = repository.get_best_pictures()
        cache.set("best_pictures", pictures, 200)
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à")
        return pictures
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–∏—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫: {e}")
        return []

@dp.message(Command("start"))
async def handle_start(message: types.Message):
    welcome_text = """
    üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
    ‚Ä¢ üëç –•–æ—Ä–æ—à–∏–µ - –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    ‚Ä¢ üî• –¢–æ–ø - —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ (—Ä–µ–π—Ç–∏–Ω–≥ > 100)
    ‚Ä¢ –°–±—Ä–æ—Å - –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–Ω–∞—á–∞–ª–∞
    """
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

@dp.message(Command("menu"))
async def handle_menu(message: types.Message):
    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

@dp.message(lambda message: message.text == "üëç –•–æ—Ä–æ—à–∏–µ")
async def handle_good(message: types.Message):
    user_id = message.from_user.id
    pictures = get_good_pictures()

    if not pictures:
        await message.answer("–í –±–∞–∑–µ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏")
        return

    current_position = user_positions[user_id]["good"]
    start_idx = current_position
    end_idx = start_idx + 5

    if start_idx >= len(pictures):
        user_positions[user_id]["good"] = 0
        start_idx = 0
        end_idx = 5

    sent_count = 0
    for i in range(start_idx, min(end_idx, len(pictures))):
        try:
            reply_markup = get_main_keyboard() if i == min(end_idx, len(pictures)) - 1 else None
            await message.answer_photo(
                photo=pictures[i]["img_url"],
                caption=f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {pictures[i]['rating']}\nüìä {i+1}/{len(pictures)}",
                reply_markup=reply_markup
            )
            sent_count += 1
            await asyncio.sleep(0.1)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
            continue

    user_positions[user_id]["good"] = end_idx
    if sent_count == 0:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏")

@dp.message(lambda message: message.text == "üî• –¢–æ–ø")
async def handle_best(message: types.Message):
    user_id = message.from_user.id
    pictures = get_best_pictures()

    if not pictures:
        await message.answer("üòî –ù–µ—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º > 100")
        return

    current_position = user_positions[user_id]["best"]
    start_idx = current_position
    end_idx = start_idx + 5

    if start_idx >= len(pictures):
        user_positions[user_id]["best"] = 0
        start_idx = 0
        end_idx = 5

    sent_count = 0
    for i in range(start_idx, min(end_idx, len(pictures))):
        try:
            reply_markup = get_main_keyboard() if i == min(end_idx, len(pictures)) - 1 else None
            await message.answer_photo(
                photo=pictures[i]["img_url"],
                caption=f"üî• –¢–æ–ø! –†–µ–π—Ç–∏–Ω–≥: {pictures[i]['rating']}",
                reply_markup=reply_markup
            )
            sent_count += 1
            await asyncio.sleep(0.1)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
            continue

    user_positions[user_id]["best"] = end_idx
    if sent_count == 0:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏")


@dp.message(lambda message: message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à")
async def refresh_cash(message: types.Message):
    try:
        cache.delete("best_pictures")

        user_id = message.from_user.id
        user_positions[user_id]["good"] = 0
        user_positions[user_id]["best"] = 0
        await message.answer("‚úÖ –ö—ç—à –æ–±–Ω–æ–≤–ª—ë–Ω –∏ –ø–æ–∑–∏—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã!", reply_markup=get_main_keyboard())

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞", reply_markup=get_main_keyboard())


@dp.message(Command("help"))
async def handle_help(message: types.Message):
    help_text = """
    ü§ñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:
    /start - –Ω–∞—á–∞—Ç—å
    /menu - –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    /help - –ø–æ–º–æ—â—å
    
    –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏:
    ‚Ä¢ üëç –•–æ—Ä–æ—à–∏–µ - –≤—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    ‚Ä¢ üî• –¢–æ–ø - —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ (—Ä–µ–π—Ç–∏–Ω–≥ > 100)
    """
    await message.answer(help_text, reply_markup=get_main_keyboard())

@dp.message(lambda message: message.text == "–°–±—Ä–æ—Å")
async def handle_reset(message: types.Message):
    user_id = message.from_user.id
    user_positions[user_id]["good"] = 0
    user_positions[user_id]["best"] = 0
    await message.answer("–ü–æ–∑–∏—Ü–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–±—Ä–æ—à–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –Ω–∞—á–Ω—ë—Ç–µ —Å –ø–µ—Ä–≤—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫.", reply_markup=get_main_keyboard())


@dp.message()
async def handle_other_messages(message: types.Message):
    if message.text not in ["üëç –•–æ—Ä–æ—à–∏–µ", "üî• –¢–æ–ø", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à", "–°–±—Ä–æ—Å"]:
        await message.answer(
            "ü§î –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:",
            reply_markup=get_main_keyboard()
        )

async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())